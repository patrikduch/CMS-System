import React, { useState, useRef, MutableRefObject } from "react";
import * as gallerySystemAPI from "../../api/end-points/Gallery-System-API";

/* Type checking. */
import IEventHandlerForm from "../../../typescript/interfaces/shared/event-handlers/IEvent-Handler-Form";
import IEventHandlerHTMLElement from "../../../typescript/interfaces/shared/event-handlers/IEvent-Handler-Html-Element";
import GalleryResultMessage from "../../components/client-app/gallery/upload/Gallery-Result-Message";
import GalleryUploadProgressBar from "../../components/client-app/gallery/upload/Gallery-Upload-ProgressBar";
import InputBasic from "../../components/common/inputs/Input-Basic";
import styled from "styled-components";
import IStyledComponentProps from "../../../typescript/interfaces/shared/styled-components/IStyled-React-Component-Props";


/**
 * @function FileUpload => Component that is responsible for upload process of new images.
 * @param className => Class name that is generated by "Styled components" library.
 */
const FileUpload: React.FC<IStyledComponentProps>  = ({ className }) => {
  const [file, setFile] = useState({} as File);
  const [filename, setFilename] = useState("Vybrat soubor");
  const [fileHeight, setFileHeight] = useState(200);
  const [uploadedFile, setUploadedFile] = useState(
    {} as { fileName: string; filePath: string }
  );
  const [message, setMessage] = useState("");
  const [started, setStarted] = useState(false);

  /* Is image valid and can be uploaded? */
  const [isValid, setIsValid] = useState(false);

  const [fileInputKey, setFileInputKey] = useState(Date.now());

  const [uploadFormRef] = useState(
    useRef<HTMLFormElement>() as MutableRefObject<HTMLFormElement>
  );

  /**
   * @function onChange => Event handler for image selection.
   * @param e => Event instance of currently selected image.
   */
  const onChange = (e: IEventHandlerHTMLElement & { files: FileList }) => {
    let currentFile: File | null;

    if (e.target != null && e.target.files != null) {
      const img = new Image();
      currentFile = e.target.files[0];
      img.src = window.URL.createObjectURL(currentFile);

      img.onload = () => {
        if (img.width < 200 || img.height < 200) {
          setFileInputKey(Date.now());

          uploadFormRef.current.reset(); // Reset invalid form state

          setIsValid(false); // Flag that symbolizes invalid upload processing

          alert(
            `Rozměry Vámi zadaného obrázku jsou nedostačující. Prosím vyberte jiný.`
          );
        } else {
          if (currentFile != null) {
            setFileHeight(img.height);
            setFile(currentFile);
            setFilename(currentFile.name);
            setIsValid(true); // Flag that symbolizes valid upload processing
          }
        }
      };
    }
  };

  /**
   * @function onSubmitBtnPressedHandler => Event handler for submitting currently selected image.
   */
  const onSubmitBtnPressedHandler = () => {
    setStarted(true);
  };

  const onSubmit = async (e: IEventHandlerForm) => {
    e.preventDefault();
    const formData = new FormData();

    if (!isValid) {
      alert(`Vámi zadaný obrázek nelze nahrát. Zkuste to prosím znova.`);
      return;
    }
    formData.append("height", "" + fileHeight);
    formData.append("file", file);

    try {
      const res = await gallerySystemAPI.uploadSinglePhoto(formData, {
        headers: {
          "Content-Type": "multipart/form-data",
        },
      });

      const { fileName, filePath } = res.data;

      setUploadedFile({ fileName, filePath });
      setStarted(false);
      setMessage(`Soubor: "${file.name}" byl úspěšně nahrán.`);

      gallerySystemAPI.saveNewImage(
        {
          name: file.name,
          description: file.name,
          imageUrl: `${res.data.file.fileName}`,
        },
        {}
      );
    } catch (err) {
      setStarted(false);
      setMessage("Nahrávání souboru selhalo.");
    }
  };

  return (
    <>
      <GalleryResultMessage msg={message} isVisible={message.length > 0} />
      <GalleryUploadProgressBar isVisible={started} />

      <form onSubmit={onSubmit} ref={uploadFormRef}>
        <label className="custom-file" id="customFile">
          <input type="file" className="custom-file-input" />
          <span className="custom-file-control form-control-file"></span>
        </label>

        <div className={`form-group ${className}`}>
          <input
            type="file"
            className="form-control-file font-weight-bold"
            id="inputFile"
            data-title={isValid ? filename : "Procházet soubory..."}
            onChange={onChange}
            key={fileInputKey}
          />
        </div>

        <InputBasic
          id="fileuploadInput"
          name="fileuploadField"
          type="submit"
          value="Nahrát soubor"
          onClick={onSubmitBtnPressedHandler}
        />
      </form>
      {uploadedFile ? (
        <div className="row mt-5">
          <div className="col-md-6 m-auto">
            <h3 className="text-center">{uploadedFile.fileName}</h3>
            <img style={{ width: "100%" }} src={uploadedFile.filePath} alt="" />
          </div>
        </div>
      ) : null}
    </>
  );
};

export default styled(FileUpload)`

margin-top: -1.5vh;
  margin-bottom: 2.5vh;
  .form-control-file {
    position: relative;
    width: 100%;
    height: 100%;
    min-height: 6em;
    outline: none;
    visibility: hidden;
    cursor: pointer;
    background-color: black;
    box-shadow: 0 0 5px solid currentColor;
    &:before {
      content: attr(data-title);
      position: absolute;
      left: 0;
      width: 100%;
      min-height: 6em;
      line-height: 2em;
      padding-top: 1.5em;
      opacity: 1;
      visibility: visible;
      text-align: center;
      border: 0.25em dashed currentColor;
      transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
      overflow: visible;
    }
    &:hover {
      &:before {
        border-style: solid;
        box-shadow: inset 0px 0px 0px 0.25em currentColor;
      }
    }
  }


`;
